// <auto-generated />
using System;
using GomelStateUniversity_Activity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GomelStateUniversity_Activity.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221204152424_RolesUpdate")]
    partial class RolesUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.ApplicationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationParameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipientContacts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubdivisionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "e9c84823-8e52-4bce-aeab-5c3435059c5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23d875e1-2d80-4905-a52d-8584ecb37f37",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEC9RVRfJpeULnDo9YKJBBIQpty/59BsyI14YA74+l5fcDOA/qCtcZUNBMpRDN/cokQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d434d335-e0c7-4433-b3b7-3dfba101a15f",
                            TwoFactorEnabled = false,
                            UserName = "Administrator",
                            Year = 0
                        });
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.CreativityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreativityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Песня"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Танец"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Другое"
                        });
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubdivisionId")
                        .HasColumnType("int");

                    b.Property<double>("TicketPrice")
                        .HasColumnType("float");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.EventUser", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Tickets")
                        .HasColumnType("int");

                    b.HasKey("EventId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.LaborDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LaborDirections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Педагогический отряд"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Сельскохозяйственные работы"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Лесник"
                        });
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EventId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.ScheduleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.SportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SportTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Карате"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Бадминтон"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Гиревой спорт"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Волейбол"
                        });
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.Subdivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contacts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subdivisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contacts = "VELIKY@gsu.by",
                            Name = "Отдел культуры и досуга молодежи"
                        },
                        new
                        {
                            Id = 2,
                            Contacts = "KULESHOV@gsu.by",
                            Name = "Спортивный клуб"
                        },
                        new
                        {
                            Id = 3,
                            Contacts = "LVDUBROVSKAYA@gsu.by",
                            Name = "Информационно-аналитическая служба и отдел воспитательной работы с молодежью"
                        },
                        new
                        {
                            Id = 4,
                            Contacts = "FEDORENKO@gsu.by",
                            Name = "Трудовая и волонтерская деятельность"
                        },
                        new
                        {
                            Id = 5,
                            Contacts = "AZYAVCHIKOV@gsu.by",
                            Name = "Трудовая и волонтерская деятельность"
                        },
                        new
                        {
                            Id = 6,
                            Contacts = "TROSHEVA@gsu.by",
                            Name = "Консультации психолога"
                        },
                        new
                        {
                            Id = 7,
                            Contacts = "hodanovich@gsu.by",
                            Name = "Отзывы"
                        },
                        new
                        {
                            Id = 8,
                            Contacts = "osnach@gsu.by",
                            Name = "Отзывы"
                        });
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.SubdivisionActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubdivisionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("subdivisionActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Организатор ",
                            SubdivisionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Артист ",
                            SubdivisionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Спорт ",
                            SubdivisionId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Вступление в организацию ",
                            SubdivisionId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Работа в студенческом отряде ",
                            SubdivisionId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "6aedd11d-510d-4017-b685-1c6b6fa92b91",
                            ConcurrencyStamp = "bce813f4-7061-4267-b682-8efc78c965fc",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "15d32ce6-852a-4591-afeb-af0293974d8a",
                            ConcurrencyStamp = "5a8cecba-d1e6-4129-8381-92ceb11af503",
                            Name = "supervisor",
                            NormalizedName = "SUPERVISOR"
                        },
                        new
                        {
                            Id = "51781939-cf8c-4303-a65c-555397da7320",
                            ConcurrencyStamp = "c743a1fb-70f1-4901-860c-2fe87dc7ca4a",
                            Name = "Студент",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "940f5024-7d9d-4750-a428-e4abd61b2ab9",
                            ConcurrencyStamp = "bada6509-76ee-41ae-82da-cf7a264b1cce",
                            Name = "Модератор отзывов",
                            NormalizedName = "MOD"
                        },
                        new
                        {
                            Id = "d9cfc45b-3396-45b8-a906-90c36d665399",
                            ConcurrencyStamp = "37331a44-91f5-49ae-ba6b-c0493802ee4d",
                            Name = "Культурно-досуговая деятельность",
                            NormalizedName = "CULTURE"
                        },
                        new
                        {
                            Id = "d43a01de-f838-4de5-8324-4eabc4b2676d",
                            ConcurrencyStamp = "8068469c-7c3e-41c7-9de4-1098d8b16178",
                            Name = "Спортивные мероприятия",
                            NormalizedName = "SPORTS"
                        },
                        new
                        {
                            Id = "5f3d63f0-61d5-4dd3-bf54-3b0a5c88c334",
                            ConcurrencyStamp = "d132befb-e09f-44aa-9ce7-12385584b790",
                            Name = "Волонтерская деятельность",
                            NormalizedName = "VOLUNTEER"
                        },
                        new
                        {
                            Id = "0ffad0f4-9d7d-457f-b2b8-db87739d1648",
                            ConcurrencyStamp = "ba3d5fca-364b-412c-a4f4-966a63da1888",
                            Name = "Профсоюз",
                            NormalizedName = "UNION"
                        },
                        new
                        {
                            Id = "bf073d17-9c3f-4101-9bd7-b8d44a301cd5",
                            ConcurrencyStamp = "f3237ebb-c8e8-453f-8cc7-513e50988e12",
                            Name = "Психолог",
                            NormalizedName = "PSYCHOLOGIST"
                        },
                        new
                        {
                            Id = "32f105f4-f03d-428b-be62-c5523bf60f90",
                            ConcurrencyStamp = "b6be392d-87f2-465d-ac0e-2bcfce8ed5c4",
                            Name = "Мероприятия и выставки",
                            NormalizedName = "EXHIBITION"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e9c84823-8e52-4bce-aeab-5c3435059c5c",
                            RoleId = "6aedd11d-510d-4017-b685-1c6b6fa92b91"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.ApplicationForm", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("GomelStateUniversity_Activity.Models.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionId");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.Event", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.Subdivision", "Subdivision")
                        .WithMany("Events")
                        .HasForeignKey("SubdivisionId");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.EventUser", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("EventUsers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GomelStateUniversity_Activity.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.Review", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("GomelStateUniversity_Activity.Models.Event", "Event")
                        .WithMany("Reviews")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.ScheduleItem", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("GomelStateUniversity_Activity.Models.SubdivisionActivityType", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GomelStateUniversity_Activity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GomelStateUniversity_Activity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
